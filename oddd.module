<?php
use \ArtfulRobot\Email;
use GeoIp2\Database\Reader;

/**
  * @file
  * Proof of concept for PayPal donations.
  *
  */

/**
  * Implements hook_menu
  */
function oddd_menu()
{
  return [
    // Proof of concept page.
    'oddd/demo' => [
      'page callback'   => 'oddd__page_demo',
      'access callback' => TRUE,
    ],

    // Proof of concept JSON API
    'oddd/api' => [
      'page callback'   => 'oddd__page_api',
      'access callback' => TRUE,
    ],

    // Business logic for paypal callbacks.
    'oddd/ppcallback' => [
      'page callback'   => 'oddd__page_ppcallback',
      'access callback' => TRUE,
    ],
  ];
}
/**
 *
 * @param array $variables
 */
function oddd_preprocess_node(&$variables) {
  if ($variables['node']->type === 'donation_page') {
    drupal_page_is_cacheable(FALSE);

    // Do GeoIP lookup unless 'geo' override on query.
    if (!empty($_GET['geo']) && preg_match('/^[A-Z]{2,3}$/', $_GET['geo'])) {
      $country = $_GET['geo'];
    }
    else {
      require_once(__DIR__ . '/vendor/autoload.php');
      $reader = new Reader( __DIR__ . '/GeoLite2-Country.mmdb');
      $record = $reader->country($_SERVER['REMOTE_ADDR']);
      $country = $record->country->isoCode ?? 'GB';
    }

    $variables['theme_hook_suggestions'][] = 'donation_page';
    $variables['thanks'] =(($_GET['result'] ?? '') === '1'); 
    $variables['return_url'] = 'https://opendemocracy.net';
    $variables['odd_config'] = htmlspecialchars(json_encode([
      'title'          => $variables['title'],
      'nid'            => $variables['nid'],
      'body'           => $variables['body'][0]['safe_value'] ?? '',
      'regular_or_one' => $variables['field_regular_one_off'][0]['value'],
      'presets'        => json_decode($variables['field_presets'][0]['value']),
      'account'        => $variables['field_account'][0]['value'],
      'source'         => $_GET['source'] ?? '',
      'geo'            => $country,
    ]));
  }
}
/**
 * Implements hook_theme().
 */
function oddd_theme($existing, $type, $theme, $path) {
  //global $config; $config['theme_debug'] = 1;
  return [
    'donation_page' => [
      'base hook' => 'node',
      'template' => 'templates/donation-page'
    ]];
}

function oddd__page_demo() {

  // Geoip.
  require_once __DIR__ . '/vendor/autoload.php';

  // This creates the Reader object, which should be reused across
  // lookups.
  $reader = new Reader( __DIR__ . '/GeoLite2-Country.mmdb');
  $record = $reader->country($_SERVER['REMOTE_ADDR']);
  $country = $record->country->isoCode;
  $replacements = ['{country}' => $country];

  if (!isset($_GET['result'])) {
    // Give the form.
    return ['#markup' => strtr(file_get_contents(__DIR__ . '/page-demo.html'), $replacements)];
  }
  elseif ($_GET['result'] == 1) {
    return ['#markup' => "<h2>Thanks</h2><p>Muchly</p>"];
  }
  else {
    return ['#markup' => "<h2>Oh no</h2><p>There was some sort of problem.</p>"];
  }
}


function oddd__page_api() {

  $method = $_SERVER['REQUEST_METHOD'] ?? 'GET';
  if ($method === 'GET') {
    $input = $_GET;
  }
  else {
    $input = json_decode(file_get_contents('php://input') ?? NULL, TRUE);
  }
  if (!is_array($input)) {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = '{"error": "Invalid request err2"}';
  }

  // Each request identifies itself with a nid, so we can look up various details directly from the node.
  $nid = (int) $input['nid'] ?? 0;
  if (!$nid) {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = '{"error": "Invalid request err1"}';
  }
  $node = node_load($nid);
  if (!$node) {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = '{"error": "Invalid request err3"}';
  }

  // Augment incoming data with data from node.
  $input['legal_entity'] = $node->field_account['und'][0]['value'] ?? '';
  $input['project']      = $node->field_project['und'][0]['value'] ?? '';
  $input['campaign']     = $node->field_project['und'][0]['value'] ?? '';
  $input['test_mode']    = (int) $node->field_test_mode['und'][0]['value'] ?? 0;
  $input['return_url']  = url("node/$nid", ['absolute' => TRUE]);

  // This could be done over an API request if needed in future.
  civicrm_initialize();
  $response = oddc__get_redirect_url($input);
  // testing: $response = ['error' => 'Foo error'];

  if (empty($response['error'])) {
    $body = json_encode(['url' => $response['url']]);
  }
  else {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = json_encode(['error' => $response['error']]);
  }

  header("Content-Type: application/json");
  echo $body;
  drupal_exit();
}


