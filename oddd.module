<?php
use \ArtfulRobot\Email;
use GeoIp2\Database\Reader;
use GeoIp2\Exception\AddressNotFoundException;

/**
  * @file
  * oD Donations Drupal (oddd) module for donation forms on support.opendemocracy.net
  *
  * See also oD Donations CiviCRM (oddc) extension.
  *
  */

/**
  * Implements hook_menu
  */
function oddd_menu()
{
  return [
    // Settings page.
    'admin/config/oddd' => [
      'title'            => t('Donation Pages'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => ['oddd__form_config'],
      'access arguments' => ['edit any donation_page content'],
    ],
    // ABs
    'oddd/ab/%' => [
      'page callback'    => 'oddd__page_ab_redirect',
      'page arguments'   => [2],
      'access arguments' => TRUE,
    ],
    // includes 'admin/content/oddd/ab/new/edit'
    'admin/content/oddd/ab/%/edit' => [
      'page callback'    => 'drupal_get_form',
      'page arguments'   => ['oddd__form_ab_edit', 4],
      'access arguments' => ['edit any donation_page content'],
    ],
    'admin/content/oddd/ab/new/edit' => [
      'page callback'    => 'drupal_get_form',
      'page arguments'   => ['oddd__form_ab_edit', 'new'],
      'access arguments' => ['edit any donation_page content'],
    ],
    'admin/content/oddd/ab/%/delete' => [
      'page callback'    => 'drupal_get_form',
      'page arguments'   => ['oddd__form_ab_delete', 4],
      'access arguments' => ['edit any donation_page content'],
    ],
    'admin/content/oddd/ab' => [
      'title'            => t('Donation Page ABs'),
      'page callback'    => 'oddd__page_ab_list',
      'access arguments' => ['edit any donation_page content'],
    ],
    // JSON API - used by the oddd forms, not the petition, nor the wagtail petition!
    'oddd/api' => [
      'page callback'   => 'oddd__page_api',
      'access callback' => TRUE,
    ],
    'oddd/clone/%' => [
      'page callback'   => 'drupal_get_form',
      'page arguments'  => ['oddd__form_clone', 2],
      'access arguments'=> ['edit any donation_page content'],
    ],

    // Business logic for paypal callbacks.
    'oddd/ppcallback' => [
      'page callback'   => 'oddd__page_ppcallback',
      'access callback' => TRUE,
    ],
    'image-for/node/%' => [
      'page callback'   => 'oddd__page_image',
      'page arguments'  => [2],
      'access callback' => TRUE,
    ],
    'richtest' => [
      'page callback' => 'oddd__page_rich',
      'access callback' => TRUE,
    ]
  ];
}
/**
 *
 * @param array $variables
 */
function oddd_preprocess_node(&$variables) {
  if ($variables['node']->type !== 'donation_page') {
    // Nothing to do with us.
    return;
  }
  drupal_page_is_cacheable(FALSE);
  // If we were sent data on the query string that we don't want the browser to store in its history,
  // e.g. names, emails, move that onto the session now and redirect, preserving other fields.

  if ($_GET) {
    // Copy GET data to our original query, preferring incoming GET data
    $_SESSION["node/" . $variables['node']->nid]['original_query'] = array_merge($_SESSION["node/" . $variables['node']->nid]['original_query'] ?? [], $_GET);
    if (array_intersect(['fname', 'lname', 'email', 'postcode'], array_keys($_GET))) {
      // Redirect back to self without these params.
      $newQuery = $_GET;
      unset($newQuery['fname'], $newQuery['lname'], $newQuery['email'], $newQuery['postcode']);
      drupal_goto(request_path(), ['query' => $newQuery]);
      // Script exits here.
    }
  }

  civicrm_initialize();

  if (!empty($_GET['gcrf'])) {
    // User is returning from a GoCardless redirect flow.
    $input = $_GET;
    oddd__add_page_details($input, $variables['node']);
    oddc__complete_go_cardless_redirect_url($input);
    drupal_goto(request_path(), ['query' => ['result' => 1]]);
    // Script exits here.
  }

  if (!empty($_POST)) {
    // User has clicked "Return to Merchant" after a successful PayPal transaction.
    Civi::log()->info('paypal Return to Merchant', ['post' => $_POST]);
    $input = $_POST;
    oddd__add_page_details($input, $variables['node']);
    oddc__complete_paypal($input);
    drupal_goto(request_path(), ['query' => ['result' => 1]]);
  }

  // Now the normal case: Either displaying form or thank you.

  // We need background image, if there is one.
  $variables['background'] = '';
  if (!empty($variables['field_background_image'][0]['uri'])) {
    // Prepare background image
    $image_uri      = $variables['field_background_image'][0]['uri'];
    $style          = 'background';
    $derivative_uri = image_style_path($style, $image_uri);
    $success        = file_exists($derivative_uri) || image_style_create_derivative(image_style_load($style), $image_uri, $derivative_uri); $new_image_url  = file_create_url($derivative_uri);

    $variables['background'] = "background-image:url('" . htmlspecialchars($new_image_url) . "');background-size:cover;background-position:center;padding:1rem;";
  }
  $variables['theme_hook_suggestions'][] = 'donation_page';

  if (($_GET['result'] ?? '') === '1') {
    // Just displaying a thank you page.
    if (isset($_GET['worth_test'])) {
      $_SESSION['oddc_analytics_data'] = [
        'amount'          => (float) $_GET['worth_test'],
        'contribution_id' => 'test_1', // obviously a test, usually numeric
        'affiliation'     => 'openDemocracy Donation Page',
        'currency'        => 'GBP',
      ];
    }
    // Create a json-encoded object for anlytics.
    $variables['json_encoded_analytics_data'] = json_encode([
      'amount'      => (float) ($_SESSION['oddc_analytics_data']['amount'] ?? 0),
      'id'          => ($_SESSION['oddc_analytics_data']['contribution_id'] ?? 'missing'),
      'currency'    => ($_SESSION['oddc_analytics_data']['currency'] ?? 'GBP'),
      'affiliation' => ($_SESSION['oddc_analytics_data']['affiliation'] ?? 'openDemocracy Donation Page'),
    ]);
    watchdog('oddd',
      'Thank you analytics: session: %analytics, json: %json',
      [ '%analytics' => json_encode($_SESSION['oddc_analytics_data'], JSON_PRETTY_PRINT),
      '%json' => $variables['json_encoded_analytics_data']],
      WATCHDOG_NOTICE);

    // Remove from session, in case user presses back/revisits page.
    $_SESSION['oddc_analytics_data'] = [];

    $variables['thanks'] = 1;
    $variables['thanks_text'] = $variables['content']['field_thanks_web_text'][0]['#markup'] ?? '<p>Thank you.</p>';

    $variables['share_url'] = 'https://support.opendemocracy.net/' . request_path();
    $variables['return_url'] = $_SESSION['od_referrer_return'] ?? 'https://opendemocracy.net';
    unset($_SESSION['od_referrer_return']);
    $variables['odd_config'] = htmlspecialchars(json_encode([]));

    // Don't need this any more.
    unset($_SESSION["node/" . $variables['node']->nid]);
  }
  else {
    // Displaying the form.
    // Do GeoIP lookup unless 'geo' override on query.
    if (!empty($_GET['geo']) && preg_match('/^[A-Z]{2,3}$/', $_GET['geo'])) {
      $country = $_GET['geo'];
    }
    else {
      require_once(__DIR__ . '/vendor/autoload.php');
      $reader = new Reader( __DIR__ . '/GeoLite2-Country.mmdb');
      try {
        $record = $reader->country($_SERVER['REMOTE_ADDR']);
        $country = $record->country->isoCode ?? 'GB';
      }
      catch (AddressNotFoundException $e) {
        $country = 'GB';
      }
    }


    $variables['thanks'] = 0;

    // Other ways text.
    $extra = '';
    if ($variables['field_account'][0]['value'] === 'company') {
      $_ = 'oddd_company_other_ways_text';
    }
    elseif ($variables['field_account'][0]['value'] === 'charity') {
      $_ = 'oddd_charity_other_ways_text';
    }
    if ($_) {
      $_ = variable_get($_, ['format' => 'formatted', 'value'=> '']);
      $extra = check_markup($_['value'], $_['format']);
    }

    // Provided text overrides default.
    /*
    if (!empty($variables['field_other_text'][0]['safe_value'])) {
      $extra = $variables['field_other_text'][0]['safe_value'];
    }
     */

    $originalQuery = $_SESSION["node/" . $variables['node']->nid]['original_query'] ?? [];

    $odd_app_config = [
      'title'           => $variables['title'],
      'nid'             => $variables['nid'],
      'body'            => $variables['body'][0]['safe_value'] ?? '',
      'standfirst'      => $variables['field_standfirst'][0]['safe_value'] ?? '',
      'extra'           => $extra,
      'regular_or_one'  => $variables['field_regular_one_off'][0]['value'],
      'legal_entity'    => $variables['field_account'][0]['value'],
      'presets'         => json_decode($variables['field_presets'][0]['value']),
      'account'         => $variables['field_account'][0]['value'],
      'source'          => $_GET['source'] ?? ($_GET['src'] ?? ''),
      'prefill_amount'  => $_GET['amount'] ?? '',
      'geo'             => $country,
      "email"           => $originalQuery['email'] ?? '',
      'mode'            => ($variables['field_test_mode'][0]['value'] ?? 0) ? 'test' : 'live',
      "first_name"      => $originalQuery['fname'] ?? '',
      "last_name"       => $originalQuery['lname'] ?? '',
      "street_address"  => '',
      "city"            => '',
      "postal_code"     => $originalQuery['postcode'] ?? '',
      'campaign_target' => 0,
      'campaign_total'  => 0,
      "country"         => $country, // default to geoip detected country @todo complex thing if sent from form
      "include_address" => (int) ($variables['field_include_address'][0]['value']),
      "mailing_list"    => (int) ($variables['field_mailing_list'][0]['value'] ?? 0),
			"regular_push"    =>   ($variables['field_regular_push'][0]['value'] ?? '')
														? $variables['field_regular_push'][0]['value']
														: variable_get('oddd_default_regular_push', ''),
      "ux"              => ($variables['field_ux'][0]['value'] ?? 'donation-1'),
      'tweet'           => ($variables['node']->field_twitter_tweet_text['und'][0]['value'] ?? ''),
      'facebook'        => (int) ($variables['node']->field_facebook['und'][0]['value'] ?? 0),
      'fund_deadline_date' => $variables['node']->field_funding_deadline['und'][0]['value'] ?? '',
      'fund_deadline_text' => $variables['node']->field_funding_deadline_text['und'][0]['value'] ?? '',
    ];

    // Allow utm_ params to override source obtained from source/src.
    $utms = '|' . implode('', array_map(function($_) { return ($_GET[$_] ?? '') . '|'; }, ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content']));
    if ($utms !== '||||||') {
      $odd_app_config['source'] = $utms;
    }

    if ($variables['node']->field_campaign['und'][0]['value'] ?? '') {
      // We have to add campaign data.
      oddc__add_campaign_funding_data($odd_app_config, $variables['node']->field_campaign['und'][0]['value']);
    }

    if (!empty($_GET['cid']) && !empty($_GET['cs'])) {
      // Looks like we have a contact ID and a checksum.
      oddc__add_contact_data_from_checksum($odd_app_config, $_GET['cid'], $_GET['cs']);
    }

    // Validate the prefill_amount.
    $prefill_currency = 'GBP';
    if (!empty($odd_app_config['prefill_amount'])) {
      if (preg_match('/^\d+(?:\.\d\d)?(GBP|EUR|USD)(oneoff|recur)$/', $odd_app_config['prefill_amount'], $matches)) {
        // Store the currency to see whether we need the countries list later.
        $prefill_currency = $matches[1];
      }
      else {
        // Remove it, it's not valid.
        $odd_app_config['prefill_amount'] = '';
      }
    }

    if ($country !== 'GB' || $prefill_currency !== 'GBP') {
      // Need to provide country list.
      civicrm_initialize();
      $odd_app_config['countries'] = oddc__get_country_list();
    }

    // Add twitter, facebook


    $variables['odd_config'] = htmlspecialchars(json_encode($odd_app_config));

    // Record referrer - we'll go back there later.
    $referrer = $_SERVER['HTTP_REFERER'] ?? '';
    // We must only return to od.net or staging.od.net
    if (!preg_match('@^https://(?:(www|staging)\.)?opendemocracy.net/(.*)$@', $referrer)) {
      $referrer = 'https://www.opendemocracy.net';
    }
    $_SESSION['od_referrer_return'] = $referrer;
  }

}
function oddd_form_donation_page_node_form_alter(&$form, &$form_state, $hook) {

  // Convert the Campaign field into a drop-down select list.
  civicrm_initialize();
  $campaigns = civicrm_api3('Campaign', 'get', [
    'return'     => ['name', 'title'],
    'sequential' => 1,
    'options'    => ['limit' => 0, 'sort' => 'created_date DESC'],
  ]);
  $options = ['' => '--Select--'];
  foreach ($campaigns['values'] as $_) {
    $options[$_['name']] = $_['title'];
  }
  // Add a widget for campaign.
  $form['campaign_select'] = [
    '#type' => 'select',
    '#options' => $options,
  ];

  // Convert the Mailing field into a drop-down.
  $result = civicrm_api3('Group', 'get', [
    'return'     => ["id", "title"],
    'group_type' => "Mailing List",
    'options'    => ['sort' => "title", 'limit' => 0],
  ]);
  $options = ['' => '--Do not offer email signup--'];
  foreach ($result['values'] as $_) {
    $options[$_['id']] = $_['title'];
  }
  // Add a widget for campaign.
  $form['mailing_list_select'] = [
    '#type'    => 'select',
    '#options' => $options,
  ];

  // Convert the Project field into a drop-down select list.
  $projects = civicrm_api3('OptionValue', 'get',  [
    'sequential'      => 1,
    'return'          => ["label", "value"],
    'option_group_id' => "od_project_opts",
  ]);
  $options = ['' => '--Select--'];
  foreach ($projects['values'] as $_) {
    $options[$_['value']] = $_['label'];
  }
  // Add a widget for campaign.
  $form['project_select'] = [
    '#type' => 'select',
    '#options' => $options,
  ];

  // Convert the Thank you Message Template field into a drop-down select list.
  civicrm_initialize();
  $result = civicrm_api3('MessageTemplate', 'get', [
    'return'    => ["id", "msg_title"],
    'is_active' => 1,
    'options'   => ['limit' => 0, 'sort' => 'msg_title'],
  ]);
  $options = ['' => '-- Do not send a thank you --'];
  foreach ($result['values'] as $id => $_) {
    $options[$id] = $_['msg_title'];
  }
  // Add a widget for campaign.
  $form['msg_tpl_select'] = [
    '#type' => 'select',
    '#options' => $options,
  ];

  // Vuejs app to do json.
  drupal_add_js('https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js');
  drupal_add_js(drupal_get_path('module', 'oddd') . '/admin.js');
}
/**
 * Implements hook_theme().
 */
function oddd_theme($existing, $type, $theme, $path) {
  //global $config; $config['theme_debug'] = 1;
  return [
    'donation_page' => [
      'base hook' => 'node',
      'template' => 'templates/donation-page'
    ]];
}


// Hooks from hook_post_action
/**
 *
 * @param Object $node
 * @param string
 */
function oddd_node_postsave($node, $hook_type) {
  $json = [
    // @todo load normal thanks text
    'shareAsk'         => check_markup($node->field_thanks_can_you_share['und'][0]['value'], $node->field_thanks_can_you_share['und'][0]['format']),
    'donateAsk'        => check_markup($node->field_thanks_can_you_donate['und'][0]['value'], $node->field_thanks_can_you_donate['und'][0]['format']),
    'shareIntro'       => check_markup($node->field_text_above_share_buttons['und'][0]['value'], $node->field_text_above_share_buttons['und'][0]['format']),
    'finalMessage'     => check_markup($node->field_final_message['und'][0]['value'], $node->field_final_message['und'][0]['format']),
    'title'            => $node->title,
    'donateUrl'        => url("node/$node->nid", ['absolute' => TRUE, 'https' => TRUE]),
    'submitText'       => $node->field_submit_text['und'][0]['value'],
    'twitterText'      => $node->field_twitter_tweet_text['und'][0]['value'] ?? '',
    'facebook'         => (int) ($node->field_facebook['und'][0]['value'] ?? 0),
    'whatsappText'     => $node->field_whatsapp_text['und'][0]['value'] ?? '',
    'mailingGroup'     => $node->field_mailing_list['und'][0]['value'] ?? 0,
    'testMode'         => (int) ($node->field_test_mode['und'][0]['value'] ?? 0),
    'totaliserText'    => $node->field_totaliser_text['und'][0]['value'] ?? 'This petition has been signed',
    'consentAsk'       => $node->field_consent_ask['und'][0]['value'] ?? '',
    'countryAskText'   => $node->field_country_ask['und'][0]['value'] ?? "Please let us know your country (optional). We'd like to be able to tell our readers about what's going on in their area.",
    'emailIsOptional'  => $node->field_email_is_optional['und'][0]['value'] ?? 0,
    'fundDeadlineDate' => $node->field_funding_deadline['und'][0]['value'] ?? '',
    'fundDeadlineText' => $node->field_funding_deadline_text['und'][0]['value'] ?? '',
    'presets'          => json_decode($node->field_presets['und'][0]['value'] ?? 'false'),
  ];
  $resource = "public://petition-config/$node->nid.json";
  // $resource_url = file_create_url($resource);
  $_ = file_put_contents($resource, json_encode($json));
}


// Page and form callbacks.
/**
 * Page callback for json API endpoint used by the public VueJS app for donation pages.
 *
 */
function oddd__page_api() {

  try {
    $method = $_SERVER['REQUEST_METHOD'] ?? 'GET';
    if ($method === 'POST') {
      $input = json_decode(file_get_contents('php://input') ?? NULL, TRUE);
      if (!is_array($input)) {
        throw new InvalidArgumentException("Invalid request err2");
      }
    }

    // We need to know which service this request is for.
    if (!preg_match('/^(donation|signup)$/', $input['service'] ?? '')) {
      throw new InvalidArgumentException("Invalid request err4");
    }

    // Each request identifies itself with a nid, so we can look up various details directly from the node.
    $nid = (int) ($input['nid'] ?? 0);
    if (!$nid) {
      throw new InvalidArgumentException("Invalid request err1");
    }
    $node = node_load($nid);
    if (!$node) {
      throw new InvalidArgumentException("Invalid request err3");
    }
    else {
      oddd__add_page_details($input, $node);
      // If we have source on GET, (and not in input), then add it to input.
      if (empty($input['source'])) {

        // Use utm params if passed (they won't be until/unless Wagtail starts sending them).
        $utms = '|' . implode('', array_map(function($_) { return ($_GET[$_] ?? '') . '|'; }, ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content']));
        if ($utms !== '||||||') {
          $input['source'] = $utms;
        }
        // For now, let 'source' override the utms.
        if (!empty($_GET['source'])) {
          $input['source'] = $_GET['source'];
        }
      }

      civicrm_initialize();
      // This could be done over a CiviCRM API request if needed in future - if we could fix a way to not rely on thenode lookups.
      $method = 'processRequest' . ucfirst($input['service']);
      $response = CRM_Oddc::factory()->$method($input);

      if (empty($response['error'])) {
        // If successful, output response we got as JSON.
        $body = json_encode($response);
      }
      else {
        header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
        $body = json_encode(['error' => $response['error'], 'user_error' => $response['user_error'] ?? FALSE]);
      }
    }
  }
  catch (InvalidArgumentException $e) {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = json_encode(['error' => $e->getMessage()]);
  }

  header("Content-Type: application/json");
  echo $body;
  drupal_exit();
}

/**
 * Page callback for social share image for given node.
 */
function oddd__page_image($nid) {
  $default_image = 'sites/all/themes/aaah/images/oD_logo.png';
  // if no node id, output default logo
  $file = DRUPAL_ROOT . $default_image;

  if ($nid) {
    // try to find the #1 image for the page
    $entity = node_load($nid);
    if ($entity) {

      $imgs   = field_get_items( 'node', $entity, 'field_share_image' );
      if (count($imgs) && !empty($imgs[0]['uri'])) {
        $file = $imgs[0]['uri'];
      }
      $file_type = $imgs[0]['filemime'];
      $file_size = $imgs[0]['filesize'];
    }
  }
  if (empty($file_type)) {
    drupal_goto($default_image, [], 302);
    exit;
  }

  if (empty($file_type)) $file_type = file_get_mimetype($file);
  if (empty($file_size)) $file_size = filesize($file);

  $http_headers = array(
    'Content-Type' => $file_type,
    // 'Content-Disposition' => 'attachment; filename="' . basename($file) . '"',
    'Content-Length' => $file_size,
    'Expires' => 0,
  );

  if(strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE')) {
    $http_headers['Cache-Control'] = 'must-revalidate, post-check=0, pre-check=0';
    $http_headers['Pragma'] = 'public';
  } else {
    $http_headers['Pragma'] = 'no-cache';
  }
  //  echo "$file <br />"; print_r($http_headers); exit;
  file_transfer($file, $http_headers);
  exit;

  header('Content-Description: File Transfer');
  header('Content-Type: application/octet-stream');
  header('Content-Disposition: attachment; filename='.basename($file));
  header('Content-Transfer-Encoding: binary');
  header('Expires: 0');
  header('Cache-Control: must-revalidate');
  header('Pragma: public');
  header('Content-Length: ' . filesize($file));
  ob_clean();
  flush();
  readfile($file);
  exit;
}

/**
 * Settings form at admin/config/oddd
 */
function oddd__form_config() {

  $form['oddd_default_regular_push'] = [
    '#prefix' => '<p>This affects the Donation Pages. Helpful links:</p><ul>
				<li><a href="/admin/content/donation-pages">Content » Donation Pages</a> lists all pages.</li>
				<li><a href="/node/add/donation-page">Content » Add » Donation Page</a> to add a new donation page</li>
				<li><a href="/civicrm/campaign?reset=1" >CiviCRM » Campaigns » Dashboard</a> to administer Campaigns, inc. adding/editing campaigns and setting targets (for toalisers).</li>
				<li><a href="/civicrm/dataviz/odd" >Interactive donations charts</a></li>
				<li><a href="https://docs.google.com/document/d/1PO6yX0FQyIIOIXk2R1uVGVTjA-MB0f9eWHhF8QbrOLA/edit" >Documentation</a> - Google Doc.</li>
			</ul>',
    '#type'          => 'textarea',
    '#rows'          => 2,
    '#columns'       => 60,
    '#title'         => t('Default text to push regular over one offs'),
    '#default_value' => variable_get('oddd_default_regular_push', 'Regular support makes the biggest difference. It means we do more ambitious, long-term investigations – the ‘heavy lifting’ that most newspapers don’t do any more. Thank you.'),
    '#required'      => true,
  ];

  $default = variable_get('oddd_charity_other_ways_text', ['format' => 'formatted', 'value' => '']);

  $form['oddd_charity_other_ways_text'] = [
    '#type'          => 'text_format',
    '#format'        => $default['format'] ?? 'formatted',
    '#default_value' => $default['value'] ?? '',
    '#rows'          => 15,
    '#title'         => 'Charity: Other Ways To Give text',
  ];

  $default = variable_get('oddd_company_other_ways_text', ['format' => 'formatted', 'value' => '']);
  $form['oddd_company_other_ways_text'] = [
    '#type'          => 'text_format',
    '#format'        => $default['format'] ?? 'formatted',
    '#default_value' => $default['value'] ?? '',
    '#rows'          => 15,
    '#title'         => 'Company: Other Ways To Give text',
  ];
  return system_settings_form($form);
}

/**
 * CLone node form at oddd/clone/%
 */
function oddd__form_clone($form, &$form_state, $origNid) {

  $origNode = node_load($origNid);
  if (!$origNode) {
    drupal_set_message("Node not found");
    drupal_goto('admin/content/donation-pages');
  }

  drupal_set_title("Clone donation form $origNid");

  $form['newName'] = [
    '#prefix' => '<p>Original Donation Page public title: <em>'
    . htmlspecialchars($origNode->title) . '</p>',
    '#type'          => 'textfield',
    '#title'         => 'New (internal) name',
    '#description'   => 'You can change this later, of course.',
    '#default_value' => 'Clone of ' . $origNode->field_internal_name['und'][0]['value'] ?? $origNode->title,
    '#size'          => 60,
    '#required'      => true,
  ];

  $form['submit'] = [
    '#type'  => 'submit',
    '#value' => 'Clone',
  ];

  return $form;
}

/**
 * CLone node form at oddd/clone/%
 */
function oddd__form_clone_submit($form, &$form_state) {

  $origNid = $form_state["build_info"]["args"][0];
  $node = node_load($origNid);
  if (!$node) {
    drupal_set_message("Node not found");
    drupal_goto('admin/content/donation-pages');
  }

  unset($node->nid);
  unset($node->vid);
  $node->field_internal_name['und'][0]['value'] = $form_state['values']['newName'];
  node_save($node);

  drupal_set_message("Ok, done that. Now you can edit the clone.");
  drupal_goto("node/$node->nid/edit");
}

/**
 * Augment incoming data with data from node.
 *
 * @param array &$input
 * @param object $node
 */
function oddd__add_page_details(&$input, $node) {
  $input['legal_entity']    = $node->field_account['und'][0]['value'] ?? '';
  $input['project']         = $node->field_project['und'][0]['value'] ?? '';
  $input['campaign']        = $node->field_campaign['und'][0]['value'] ?? '';
  $input['include_address'] = $node->field_include_address['und'][0]['value'] ?? 0;
  $input['mailing_list']    = $node->field_mailing_list['und'][0]['value'] ?? 0;
  $input['test_mode']       = (int) ($node->field_test_mode['und'][0]['value'] ?? 0);
  $input['is_upgrade']      = (int) ($node->field_is_upgrade['und'][0]['value'] ?? 0);
  $input['return_url']      = url("node/$node->nid", ['absolute' => TRUE]);
  $input['donation_page_nid'] = $node->nid;
  $input['thanks_message_template_id'] = (int) ($node->field_thank_you_tpl['und'][0]['value'] ?? 0);
  $input['tweet']           = $node->field_twitter_tweet_text['und'][0]['value'] ?? '';
  $input['facebook']        = (int) ($node->field_facebook['und'][0]['value'] ?? 0);
  $input['whatsapp']        = $node->field_whatsapp_text['und'][0]['value'] ?? '';
  // @todo add the current (public) title of the page?
}

/**
 * GET /admin/content/oddd/ab
 * Lists AB configs.
 */
function oddd__page_ab_list() {
  $abs = db_query("SELECT * FROM od_donation_page_ab ORDER BY id DESC;");

  // To save time, just output simple HTML here.

  $html = "<p><a href='/admin/content/oddd/ab/new/edit'>Add new</a></p>\n";
  foreach ($abs->fetchAllAssoc('id') as $ab) {
    $ab = (array) $ab;

    $nodes = node_load_multiple([$ab['nid_a'], $ab['nid_b']]);
    $nodeA = $nodes[$ab['nid_a']];
    $nodeB = $nodes[$ab['nid_b']];


    $html .= "<article class='od_ab'>";
    $html .= "<h1>A/B " . ($ab['winner'] ? "Winner: $ab[winner]" : 'No winner yet' )  . "</h1>";
    $html .= "<p>Link: <a href='https://$_SERVER[HTTP_HOST]/oddd/ab/$ab[id]'>$_SERVER[HTTP_HOST]/oddd/ab/$ab[id]</a></p>";

    if ($ab['stats_cache']) {
      $stats = json_decode($ab['stats_cache'], TRUE);
      $stats['updated'] = $stats['updated'] ? date('H:i j M Y', strtotime($stats['updated'])) : 'Never';
    }
    else {
      $stats = ['updated' => 'Never', 'A' => ['count' => 0, 'sum' => 0], 'B' => ['count' => 0, 'sum' => 0]];
    }
    $stats['total_count'] = $stats['A']['count'] + $stats['B']['count'];
    $stats['total_sum'] = $stats['A']['sum'] + $stats['B']['sum'];

    $html .= "<table><thead><tr><th>AB</th><th>Impresssions</th><th>Info</th><th>Income</th><th>Donations</th></tr></thead><tbody>";

    $isWinner = $ab['winner'] === 'A';
    $html .= "<tr><td>A " . ($isWinner ? '✔' : '') . "</td>"
      . "<td>" . number_format($ab['count_a'])
      . ($isWinner
        ? (' + ' . number_format($ab['count_winner'])
          . ' = ' . number_format($ab['count_winner'] + $ab['count_a']))
        : '' )
      . "</td>\n"
      . "<td>£" . number_format($stats['A']['sum'])
      . (($stats['total_sum'] > 0)
        ? " (" . number_format($stats['A']['sum']*100/$stats['total_sum'], 1) . "%)"
        : '')
      ."</td>\n"
      . "<td>" . number_format($stats['A']['count'])
      . (($stats['total_count'] > 0)
        ? " (" . number_format($stats['A']['count']*100/$stats['total_count'], 1) . "%)"
        : '')
      . "<td>" . htmlspecialchars($nodeA->title) . '</td></tr>';

    $isWinner = $ab['winner'] === 'B';
    $html .= "<tr><td>B " . ($isWinner ? '✔' : '') . "</td>"
      . "<td>" . number_format($ab['count_b'])
      . ($isWinner
        ? (' + ' . number_format($ab['count_winner'])
          . ' = ' . number_format($ab['count_winner'] + $ab['count_b']))
        : '' )
      . "</td>\n"
      . "<td>£" . number_format($stats['B']['sum'])
      . (($stats['total_sum'] > 0)
        ? " (" . number_format($stats['B']['sum']*100/$stats['total_sum'], 1) . "%)"
        : '')
      ."</td>\n"
      . "<td>" . number_format($stats['B']['count'])
      . (($stats['total_count'] > 0)
        ? " (" . number_format($stats['B']['count']*100/$stats['total_count'], 1) . "%)"
        : '')
      . "<td>" . htmlspecialchars($nodeB->title) . '</td></tr>'
      . "</tbody></table>\n";

    $html .= "<p>Stats "
      . ( $ab['start_timestamp'] ? " include contributions since " . date('H:i j M Y', strtotime($ab['start_timestamp'])) : ' include all contributions')
      . " and were last updated at " . htmlspecialchars($stats['updated']) . ". To update them manually you can just edit and save this AB</p>";
    $html .= "<p>" . htmlspecialchars($ab['log']) . "</p>";
    $html .= "<a href='/admin/content/oddd/ab/$ab[id]/edit'>Edit</a> |
      <a href='/admin/content/oddd/ab/$ab[id]/delete' >Delete</a>
      </article>\n";
  }


  $html .= "<style>
    article.od_ab {
      background: rgba(0,0,0,0.03);
      padding: 1rem;
      margin-bottom: 1rem;
    }
    </style>";
  return ['#markup' => $html];

}
/**
 * Provide edit/create form for ABs.
 */
function oddd__form_ab_edit($form, &$form_state, $abID) {
  if (preg_match('/^\d+$/', $abID)) {
    // Looks like a number.
    $ab = db_query("SELECT * FROM od_donation_page_ab WHERE id = $abID")->fetchAssoc();
    if (!$ab) {
      drupal_set_message('AB not found.', 'error');
      drupal_goto('admin/content/oddd/ab');
      // exits.
    }
    drupal_set_title("Edit A/B Donation Page");
  }
  else {
    drupal_set_title("Create A/B Donation Page");
    $ab = [
      'nid_a' => 0,
      'nid_b' => 0,
      'count_a' => 0,
      'count_b' => 0,
      'count_winner' => 0,
      'winner' => '',
      'log' => '',
    ];
  }

  $form['log'] = [
    '#type'          => 'textarea',
    '#rows'          => 5,
    '#cols'          => 60,
    '#title'         => 'Notes',
    '#default_value' => $ab['log'],
  ];

  // Fetch all live donation page nodes.
  $_ = [];
  if ($ab['nid_a'] > 0) {
    $_[] = $ab['nid_a'];
  }
  if ($ab['nid_b'] > 0) {
    $_[] = $ab['nid_b'];
  }
  $list = $_ ? (" OR node.nid IN (" . implode(',', $_) . ")") : '';

  $_ = db_query("SELECT nid, field_internal_name_value title, node.status published
    FROM node INNER JOIN field_data_field_internal_name i
      ON node.nid = i.entity_id
        AND i.entity_type = 'node'
        AND i.revision_id = node.vid
    WHERE (node.status = 1 $list)
    ORDER BY field_internal_name_value;")->fetchAllAssoc('nid');

  $pages = [];
  foreach ($_ as $page) {
    $page = (array) $page;
    $pages[$page['nid']] =$page;
  }


  if ($ab['nid_a']) {
    if (isset($pages{$ab['nid_a']})) {
      if ($pages[$ab['nid_a']]['published'] != '1') {
        drupal_set_message("Warning! this AB's 'A' points to a page that is not published!", 'warning');
      }
    }
    else {
      $pages[$ab['nid_a']] = ['title' => "NON EXISTANT PAGE"];
      drupal_set_message("Error! this AB's 'A' points to a page that does not exist!", 'error');
    }
  }
  if ($ab['nid_b']) {
    if (isset($pages[$ab['nid_b']])) {
      if ($pages[$ab['nid_b']]['published'] != '1') {
        drupal_set_message("Warning! this AB's 'B' points to a page that is not published!", 'warning');
      }
    }
    else {
      drupal_set_message("Error! this AB's 'B' points to a page that does not exist!", 'error');
      $pages[$ab['nid_b']] = ['title' => "NON EXISTANT PAGE"];
    }
  }
  $options = [];
  foreach ($pages as $nid=>$page) {
    $options[$nid] = $page['title'];
  }

  // Select A
  $form['nid_a'] = [
    '#type'          => 'select',
    '#title'         => 'Page A',
    '#default_value' => $ab['nid_a'],
    '#options'       => $options,
  ];

  // Select B
  $form['nid_b'] = [
    '#type'          => 'select',
    '#title'         => 'Page B',
    '#default_value' => $ab['nid_b'],
    '#options'       => $options,
  ];

  // Manual Winner selection
  $form['winner'] = [
    '#type'          => 'select',
    '#title'         => 'Winner',
    '#default_value' => $ab['winner'],
    '#options'       => [
      '' => '(None chosen yet)',
      'A' => 'A',
      'B' => 'B',
    ],
  ];

  // Count since
  $form['start_timestamp'] = [
    '#type'          => 'textfield',
    '#title'         => 'Ignore contributions before (timestamp)',
    '#default_value' => $ab['start_timestamp'] ? date('H:i j M Y', strtotime($ab['start_timestamp'])) : '',
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => isset($ab['id']) ? 'Save' : 'Create',
  ];

  return $form;
}
/**
 * Validation
 */
function oddd__form_ab_edit_validate($form, &$form_state) {

  foreach (['a', 'b'] as $variant) {
    $field = "nid_$variant";
    if (!$form_state['values'][$field]) {
      form_set_error($field, "Required");
    }
    else {
      $node = node_load($form_state['values'][$field]);
      if (!$node) {
        form_set_error($field, "page '$variant' does not exist.");
      }
      elseif ($node->status != 1) {
        form_set_error($field, "page '$variant' is not published.");
      }
    }
  }

  if ($form_state['values']['start_timestamp']
    && strtotime($form_state['values']['start_timestamp']) === FALSE) {
    form_set_error('start_timestamp', 'Invalid date time format.');
  }
}
/**
 * Submit
 */
function oddd__form_ab_edit_submit($form, &$form_state) {

  $origID = $form_state["build_info"]["args"][0];

  $ts = $form_state['values']['start_timestamp']
    ? date('YmdHis', strtotime($form_state['values']['start_timestamp']))
    : NULL;

  civicrm_initialize();
  $stats = CRM_Oddc::getAbStats([$form_state['values']['nid_a'], $form_state['values']['nid_b']], $ts);
  $stats = json_encode($stats);

  if ($origID === 'new') {
    // Create record.
    db_query("INSERT INTO od_donation_page_ab (log, nid_a, nid_b, winner, stats_cache, start_timestamp)
      values (:log, :nid_a, :nid_b, :winner, :stats, :start_timestamp)",
      [
        ':log' => $form_state['values']['log'],
        ':nid_a' => $form_state['values']['nid_a'],
        ':nid_b' => $form_state['values']['nid_b'],
        ':winner' => $form_state['values']['winner'],
        ':stats' => $stats,
        ':start_timestamp' => $ts
      ]
    );
  }
  else {
    // Update
    db_query("UPDATE od_donation_page_ab
      SET log = :log,
          nid_a = :nid_a,
          nid_b = :nid_b,
          winner = :winner,
          stats_cache = :stats,
          start_timestamp = :start_timestamp
      WHERE id = :id",
      [
        ':id'     => $origID,
        ':log'    => $form_state['values']['log'],
        ':nid_a'  => $form_state['values']['nid_a'],
        ':nid_b'  => $form_state['values']['nid_b'],
        ':winner' => $form_state['values']['winner'],
        ':stats' => $stats,
        ':start_timestamp' => $ts
      ]
    );
  }
  $form_state['redirect'] = 'admin/content/oddd/ab';
}
/**
 * Provide delete for ABs.
 */
function oddd__form_ab_delete($form, &$form_state, $abID) {
  if (preg_match('/^\d+$/', $abID)) {
    // Looks like a number.
    $ab = db_query("SELECT * FROM od_donation_page_ab WHERE id = $abID")->fetchAssoc();
    if (!$ab) {
      drupal_set_message('AB not found.', 'error');
      drupal_goto('admin/content/oddd/ab');
      // exits.
    }
    drupal_set_title("Delete A/B Donation Page");
  }
  else {
    drupal_set_message('Invalid URL', 'error');
    drupal_goto('admin/content/oddd/ab');
  }

  $form['warning'] = [
    '#markup' => '<p><strong>If you delete an AB whose URL you have published, people who click it will get an error.</strong></p>',
  ];


  $form['submit'] = [
    '#type' => 'submit',
    '#value' => 'Confirm deletion'
  ];

  return $form;
}
/**
 * Provide delete for ABs.
 */
function oddd__form_ab_delete_submit($form, &$form_state) {

  $origID = (int) $form_state["build_info"]["args"][0];
  db_query("DELETE FROM od_donation_page_ab WHERE id = :id", [':id' => $origID]);
  drupal_goto('admin/content/oddd/ab');
}
function oddd__page_ab_redirect($id) {

  if (!$id) {
    // Error.
    watchdog('oddd', 'AB URL fail: missing ID.', [], WATCHDOG_ERROR);
    return [
      '#markup' => '<h1>Sorry</h1><p>The link you followed is broken.</p><p><a href="https://opendemocracy.net">Back to openDemocracy homepage</a></p>',
    ];
  }

  // Load AB
  $ab = db_query("SELECT * FROM od_donation_page_ab WHERE id = :id", [':id' => $id])->fetchAssoc();
  if (!$ab) {
    watchdog('oddd', 'AB URL fail on ID: %id.', ['%id' => $id], WATCHDOG_ERROR);
    return [
      '#markup' => '<h1>Sorry</h1><p>The link you followed is broken.</p><p><a href="https://opendemocracy.net">Back to openDemocracy homepage</a></p>',
    ];
  }

  // Got AB.

  // do we have a winner?
  $counter = '';
  switch ($ab['winner']) {
  case 'A':
    $counter = 'count_winner';
    $nid = $ab['nid_a'];
    break;

  case 'B':
    $counter = 'count_winner';
    $nid = $ab['nid_b'];
    break;

  default:
    if (rand(1, 100) >= 50) {
      $counter = 'count_a';
      $nid = $ab['nid_a'];
    }
    else {
      $counter = 'count_b';
      $nid = $ab['nid_b'];
    }
  }

  // Just in case.
  $ab['id'] = (int) $ab['id'];
  db_query("UPDATE od_donation_page_ab SET $counter = $counter + 1 WHERE id = $ab[id]");

  // Redirect.
  $url = drupal_lookup_path('alias', "node/$nid");
  $query = $_GET;
  unset($query['q']);
  drupal_goto($url, ['query' => $query]);
}
/**
 */
function oddd__page_rich() {
  exit;
  $r = odwebapi_redis();
  print gettype($r);
  if (!class_exists('Redis')) { echo "TRUE"; }
  else {
    echo "FALSE";
  }
  exit;
}

function oddd__get_published_donation_pages() {

}
