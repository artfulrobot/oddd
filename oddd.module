<?php
use \ArtfulRobot\Email;
use GeoIp2\Database\Reader;

/**
  * @file
  * oD Donations Drupal (oddd) module for donation forms on support.opendemocracy.net
  *
  * See also oD Donations CiviCRM (oddc) extension.
  *
  */

/**
  * Implements hook_menu
  */
function oddd_menu()
{
  return [
    // JSON API
    'oddd/api' => [
      'page callback'   => 'oddd__page_api',
      'access callback' => TRUE,
    ],

    // Business logic for paypal callbacks.
    'oddd/ppcallback' => [
      'page callback'   => 'oddd__page_ppcallback',
      'access callback' => TRUE,
    ],
  ];
}
/**
 *
 * @param array $variables
 */
function oddd_preprocess_node(&$variables) {
  if ($variables['node']->type !== 'donation_page') {
    // Nothing to do with us.
    return;
  }
  drupal_page_is_cacheable(FALSE);

  if (!empty($_GET['gcrf'])) {
    // User is returning from a GoCardless redirect flow.
    civicrm_initialize();
    $input = $_GET;
    oddd__add_page_details($input, $variables['node']);
    oddc__complete_go_cardless_redirect_url($input);
    drupal_goto(request_path(), ['query' => ['result' => 1]]);
    // Script exits here.
  }

  if (!empty($_POST)) {
    // User has clicked "Return to Merchant" after a successful PayPal transaction.
    civicrm_initialize();
    Civi::log()->info('paypal Return to Merchant', ['post' => $_POST]);
    $input = $_POST;
    oddd__add_page_details($input, $variables['node']);
    oddc__complete_paypal($input);
    drupal_goto(request_path(), ['query' => ['result' => 1]]);
  }

  // Now the normal case: Either displaying form or thank you.

  // We need background image, if there is one.
  $variables['background'] = '';
  if (!empty($variables['field_background_image'][0]['uri'])) {
    // Prepare background image
    $image_uri      = $variables['field_background_image'][0]['uri'];
    $style          = 'background';
    $derivative_uri = image_style_path($style, $image_uri);
    $success        = file_exists($derivative_uri) || image_style_create_derivative(image_style_load($style), $image_uri, $derivative_uri); $new_image_url  = file_create_url($derivative_uri);

    $variables['background'] = "background-image:url('" . htmlspecialchars($new_image_url) . "');background-size:cover;background-position:center;padding:1rem;";
  }
  $variables['theme_hook_suggestions'][] = 'donation_page';

  if (($_GET['result'] ?? '') === '1') {
    // Just displaying a thank you page.
    $variables['thanks'] = 1;
    $variables['return_url'] = $_SESSION['od_referrer_return'] ?? 'https://opendemocracy.net';
    unset($_SESSION['od_referrer_return']);
    $variables['odd_config'] = htmlspecialchars(json_encode([]));
  }
  else {
    // Displaying the form.
    // Do GeoIP lookup unless 'geo' override on query.
    if (!empty($_GET['geo']) && preg_match('/^[A-Z]{2,3}$/', $_GET['geo'])) {
      $country = $_GET['geo'];
    }
    else {
      require_once(__DIR__ . '/vendor/autoload.php');
      $reader = new Reader( __DIR__ . '/GeoLite2-Country.mmdb');
      $record = $reader->country($_SERVER['REMOTE_ADDR']);
      $country = $record->country->isoCode ?? 'GB';
    }


    $variables['thanks'] = 0;

    $odd_app_config = [
      'title'           => $variables['title'],
      'nid'             => $variables['nid'],
      'body'            => $variables['body'][0]['safe_value'] ?? '',
      'extra'           => $variables['field_other_text'][0]['safe_value'] ?? '',
      'regular_or_one'  => $variables['field_regular_one_off'][0]['value'],
      'legal_entity'    => $variables['field_account'][0]['value'],
      'presets'         => json_decode($variables['field_presets'][0]['value']),
      'account'         => $variables['field_account'][0]['value'],
      'source'          => $_GET['source'] ?? ($_GET['src'] ?? ''),
      'prefill_amount'  => $_GET['amount'] ?? '',
      'geo'             => $country,
      "email"           => '',
      "first_name"      => '',
      "street_address"  => '',
      "city"            => '',
      "postal_code"     => '',
      "country"         => $country, // default to geoip detected country
      "include_address" => (int) ($variables['field_include_address'][0]['value']),
      "mailing_list"    => (int) ($variables['field_mailing_list'][0]['value'] ?? 0),
    ];

    if (!empty($_GET['cid']) && !empty($_GET['cs'])) {
      // Looks like we have a contact ID and a checksum.
      civicrm_initialize();
      oddc__add_contact_data_from_checksum($odd_app_config, $_GET['cid'], $_GET['cs']);
    }

    // Validate the prefill_amount.
    $prefill_currency = 'GBP';
    if (!empty($odd_app_config['prefill_amount'])) {
      if (preg_match('/^\d+(?:\.\d\d)?(GBP|EUR|USD)(oneoff|recur)$/', $odd_app_config['prefill_amount'], $matches)) {
        // Store the currency to see whether we need the countries list later.
        $prefill_currency = $matches[1];
      }
      else {
        // Remove it, it's not valid.
        $odd_app_config['prefill_amount'] = '';
      }
    }

    if ($country !== 'GB' || $prefill_currency !== 'GBP') {
      // Need to provide country list.
      civicrm_initialize();
      $odd_app_config['countries'] = oddc__get_country_list();
    }

    $variables['odd_config'] = htmlspecialchars(json_encode($odd_app_config));

    // Record referrer - we'll go back there later.
    $referrer = $_SERVER['HTTP_REFERER'] ?? '';
    // We must only return to od.net or staging.od.net
    if (!preg_match('@^https://(?:(www|staging)\.)?opendemocracy.net/(.*)$@', $referrer)) {
      $referrer = 'https://www.opendemocracy.net';
    }
    $_SESSION['od_referrer_return'] = $referrer;
  }

}
function oddd_form_donation_page_node_form_alter(&$form, &$form_state, $hook) {

  // Convert the Campaign field into a drop-down select list.
  civicrm_initialize();
  $campaigns = civicrm_api3('Campaign', 'get', [
    'return'     => ['name', 'title'],
    'sequential' => 1,
    'options'    => ['limit' => 0, 'sort' => 'created_date DESC'],
  ]);
  $options = ['' => '--Select--'];
  foreach ($campaigns['values'] as $_) {
    $options[$_['name']] = $_['title'];
  }
  // Add a widget for campaign.
  $form['campaign_select'] = [
    '#type' => 'select',
    '#options' => $options,
  ];

  // Convert the Mailing field into a drop-down.
  $result = civicrm_api3('Group', 'get', [
    'return'     => ["id", "title"],
    'group_type' => "Mailing List",
    'options'    => ['sort' => "title", 'limit' => 0],
  ]);
  $options = ['' => '--Do not offer email signup--'];
  foreach ($result['values'] as $_) {
    $options[$_['id']] = $_['title'];
  }
  // Add a widget for campaign.
  $form['mailing_list_select'] = [
    '#type'    => 'select',
    '#options' => $options,
  ];

  // Convert the Project field into a drop-down select list.
  $projects = civicrm_api3('OptionValue', 'get',  [
    'sequential'      => 1,
    'return'          => ["label", "value"],
    'option_group_id' => "od_project_opts",
  ]);
  $options = ['' => '--Select--'];
  foreach ($projects['values'] as $_) {
    $options[$_['value']] = $_['label'];
  }
  // Add a widget for campaign.
  $form['project_select'] = [
    '#type' => 'select',
    '#options' => $options,
  ];

  // Convert the Thank you Message Template field into a drop-down select list.
  civicrm_initialize();
  $result = civicrm_api3('MessageTemplate', 'get', [
    'return'    => ["id", "msg_title"],
    'is_active' => 1,
    'options'   => ['limit' => 0, 'sort' => 'msg_title'],
  ]);
  $options = ['' => '-- Do not send a thank you --'];
  foreach ($result['values'] as $id => $_) {
    $options[$id] = $_['msg_title'];
  }
  // Add a widget for campaign.
  $form['msg_tpl_select'] = [
    '#type' => 'select',
    '#options' => $options,
  ];

  // Vuejs app to do json.
  drupal_add_js('https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js');
  drupal_add_js(drupal_get_path('module', 'oddd') . '/admin.js');

}
/**
 * Implements hook_theme().
 */
function oddd_theme($existing, $type, $theme, $path) {
  //global $config; $config['theme_debug'] = 1;
  return [
    'donation_page' => [
      'base hook' => 'node',
      'template' => 'templates/donation-page'
    ]];
}


/**
 * Page callback for json API endpoint used by the public VueJS app
 *
 */
function oddd__page_api() {

  $method = $_SERVER['REQUEST_METHOD'] ?? 'GET';
  if ($method === 'GET') {
    $input = $_GET;
  }
  else {
    $input = json_decode(file_get_contents('php://input') ?? NULL, TRUE);
  }
  if (!is_array($input)) {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = '{"error": "Invalid request err2"}';
  }

  // Each request identifies itself with a nid, so we can look up various details directly from the node.
  $nid = (int) $input['nid'] ?? 0;
  if (!$nid) {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = '{"error": "Invalid request err1"}';
  }
  $node = node_load($nid);
  if (!$node) {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = '{"error": "Invalid request err3"}';
  }

  oddd__add_page_details($input, $node);

  // This could be done over an API request if needed in future.
  civicrm_initialize();
  $response = oddc__get_redirect_url($input);
  // testing: $response = ['error' => 'Foo error'];

  if (empty($response['error'])) {
    $body = json_encode(['url' => $response['url']]);
  }
  else {
    header("$_SERVER[SERVER_PROTOCOL] 400 Invalid request");
    $body = json_encode(['error' => $response['error'], 'user_error' => $response['user_error'] ?? FALSE]);
  }

  header("Content-Type: application/json");
  echo $body;
  drupal_exit();
}


/**
 * Augment incoming data with data from node.
 *
 * @param array &$input
 * @param object $node
 */
function oddd__add_page_details(&$input, $node) {
  $input['legal_entity']    = $node->field_account['und'][0]['value'] ?? '';
  $input['project']         = $node->field_project['und'][0]['value'] ?? '';
  $input['campaign']        = $node->field_campaign['und'][0]['value'] ?? '';
  $input['include_address'] = $node->field_include_address['und'][0]['value'] ?? 0;
  $input['mailing_list']    = $node->field_mailing_list['und'][0]['value'] ?? 0;
  $input['test_mode']       = (int) $node->field_test_mode['und'][0]['value'] ?? 0;
  $input['return_url']      = url("node/$node->nid", ['absolute' => TRUE]);
  $input['thanks_message_template_id'] = (int) $node->field_thank_you_tpl['und'][0]['value'] ?? 0;
}
